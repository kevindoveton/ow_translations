"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ggmn_en_AU = void 0;

var _Types = require("../Types");

var ggmn_en_AU = {
  org: _Types.TranslationOrg.ggmn,
  overrides: {
    search_hint: 'Search for Groundwater Stations by their ID.',
    settings_sync_heading: "GGMN Sync",
    settings_connect_to_pending_title: 'Connect to GGMN',
    settings_connect_to_connected_title: 'Connected to GGMN',
    settings_connect_to_subtitle_error: 'Error connecting to GGMN',
    settings_new_resource: "New GW Station",
    connect_to_service_description: "Connect to GGMN to create new groundwater stations and save readings from your device.",
    connect_to_service_connected_test: function connect_to_service_connected_test(fieldName, username) {
      return "You are connected to GGMN with the ".concat(fieldName, ": ").concat(username);
    },
    connect_to_service_org_selector: "Select an organisation",
    sync_login_message: "Login to sync with GGMN",
    sync_start_sync_button_loading: "Syncing with GGMN",
    sync_section_resources: "Groundwater Stations",
    sync_empty_heading: "Nothing to sync!",
    sync_empty_content: "Start taking readings or creating groundwater stations to get started.",
    new_reading_timeseries: 'Timeseries',
    resource_detail_empty_heading: 'You haven\'t found any groundwater stations yet.',
    resource_detail_empty_hint: 'Press the search button or browse the map to find some.',
    new_resource_saved_dialog: "Successfully Saved Groundwater Station!",
    new_resource_saved_dialog_warning: "Saved Location Locally. Login to GGMN to sync.",
    resource_name: "Groundwater Station",
    new_resource_asset_type_label: "Asset Type",
    new_resource_submit_button: "SUBMIT",
    timeseries_name_title: function timeseries_name_title(tsName) {
      switch (tsName.toLowerCase()) {
        case 'gwmbgs':
          return "Groundwater level below ground surface";

        case 'gwmmsl':
        default:
          return "Groundwater level above mean sea level";
      }
    }
  }
};
exports.ggmn_en_AU = ggmn_en_AU;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZ21uL2VuX0FVLnRzIl0sIm5hbWVzIjpbImdnbW5fZW5fQVUiLCJvcmciLCJUcmFuc2xhdGlvbk9yZyIsImdnbW4iLCJvdmVycmlkZXMiLCJzZWFyY2hfaGludCIsInNldHRpbmdzX3N5bmNfaGVhZGluZyIsInNldHRpbmdzX2Nvbm5lY3RfdG9fcGVuZGluZ190aXRsZSIsInNldHRpbmdzX2Nvbm5lY3RfdG9fY29ubmVjdGVkX3RpdGxlIiwic2V0dGluZ3NfY29ubmVjdF90b19zdWJ0aXRsZV9lcnJvciIsInNldHRpbmdzX25ld19yZXNvdXJjZSIsImNvbm5lY3RfdG9fc2VydmljZV9kZXNjcmlwdGlvbiIsImNvbm5lY3RfdG9fc2VydmljZV9jb25uZWN0ZWRfdGVzdCIsImZpZWxkTmFtZSIsInVzZXJuYW1lIiwiY29ubmVjdF90b19zZXJ2aWNlX29yZ19zZWxlY3RvciIsInN5bmNfbG9naW5fbWVzc2FnZSIsInN5bmNfc3RhcnRfc3luY19idXR0b25fbG9hZGluZyIsInN5bmNfc2VjdGlvbl9yZXNvdXJjZXMiLCJzeW5jX2VtcHR5X2hlYWRpbmciLCJzeW5jX2VtcHR5X2NvbnRlbnQiLCJuZXdfcmVhZGluZ190aW1lc2VyaWVzIiwicmVzb3VyY2VfZGV0YWlsX2VtcHR5X2hlYWRpbmciLCJyZXNvdXJjZV9kZXRhaWxfZW1wdHlfaGludCIsIm5ld19yZXNvdXJjZV9zYXZlZF9kaWFsb2ciLCJuZXdfcmVzb3VyY2Vfc2F2ZWRfZGlhbG9nX3dhcm5pbmciLCJyZXNvdXJjZV9uYW1lIiwibmV3X3Jlc291cmNlX2Fzc2V0X3R5cGVfbGFiZWwiLCJuZXdfcmVzb3VyY2Vfc3VibWl0X2J1dHRvbiIsInRpbWVzZXJpZXNfbmFtZV90aXRsZSIsInRzTmFtZSIsInRvTG93ZXJDYXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsSUFBTUEsVUFBbUMsR0FBSTtBQUMzQ0MsRUFBQUEsR0FBRyxFQUFFQyxzQkFBZUMsSUFEdUI7QUFFM0NDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxXQUFXLEVBQUUsOENBREo7QUFFVEMsSUFBQUEscUJBQXFCLEVBQUUsV0FGZDtBQUdUQyxJQUFBQSxpQ0FBaUMsRUFBRSxpQkFIMUI7QUFJVEMsSUFBQUEsbUNBQW1DLEVBQUUsbUJBSjVCO0FBS1RDLElBQUFBLGtDQUFrQyxFQUFFLDBCQUwzQjtBQU1UQyxJQUFBQSxxQkFBcUIsRUFBRSxnQkFOZDtBQU9UQyxJQUFBQSw4QkFBOEIsRUFBRSx3RkFQdkI7QUFRVEMsSUFBQUEsaUNBQWlDLEVBQUUsMkNBQUNDLFNBQUQsRUFBb0JDLFFBQXBCO0FBQUEsMERBQStFRCxTQUEvRSxlQUE2RkMsUUFBN0Y7QUFBQSxLQVIxQjtBQVNUQyxJQUFBQSwrQkFBK0IsRUFBRSx3QkFUeEI7QUFVVEMsSUFBQUEsa0JBQWtCLEVBQUUseUJBVlg7QUFXVEMsSUFBQUEsOEJBQThCLEVBQUUsbUJBWHZCO0FBWVRDLElBQUFBLHNCQUFzQixFQUFFLHNCQVpmO0FBYVRDLElBQUFBLGtCQUFrQixFQUFFLGtCQWJYO0FBY1RDLElBQUFBLGtCQUFrQixFQUFFLHdFQWRYO0FBZVRDLElBQUFBLHNCQUFzQixFQUFFLFlBZmY7QUFnQlRDLElBQUFBLDZCQUE2QixFQUFFLGtEQWhCdEI7QUFpQlRDLElBQUFBLDBCQUEwQixFQUFFLHlEQWpCbkI7QUFrQlRDLElBQUFBLHlCQUF5QixFQUFFLHlDQWxCbEI7QUFtQlRDLElBQUFBLGlDQUFpQyxFQUFFLGdEQW5CMUI7QUFvQlRDLElBQUFBLGFBQWEsRUFBRSxxQkFwQk47QUFxQlRDLElBQUFBLDZCQUE2QixFQUFFLFlBckJ0QjtBQXNCVEMsSUFBQUEsMEJBQTBCLEVBQUUsUUF0Qm5CO0FBdUJUQyxJQUFBQSxxQkFBcUIsRUFBRSwrQkFBQ0MsTUFBRCxFQUFvQjtBQUN6QyxjQUFRQSxNQUFNLENBQUNDLFdBQVAsRUFBUjtBQUNFLGFBQUssUUFBTDtBQUFlOztBQUNmLGFBQUssUUFBTDtBQUNBO0FBQVM7QUFIWDtBQUtEO0FBN0JRO0FBRmdDLENBQTdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNsYXRpb25PcmcsIFRyYW5zbGF0aW9uT3ZlcnJpZGVGaWxlIH0gZnJvbSBcIi4uL1R5cGVzXCI7XG5cbmNvbnN0IGdnbW5fZW5fQVU6IFRyYW5zbGF0aW9uT3ZlcnJpZGVGaWxlICA9IHtcbiAgb3JnOiBUcmFuc2xhdGlvbk9yZy5nZ21uLFxuICBvdmVycmlkZXM6IHtcbiAgICBzZWFyY2hfaGludDogJ1NlYXJjaCBmb3IgR3JvdW5kd2F0ZXIgU3RhdGlvbnMgYnkgdGhlaXIgSUQuJyxcbiAgICBzZXR0aW5nc19zeW5jX2hlYWRpbmc6IFwiR0dNTiBTeW5jXCIsXG4gICAgc2V0dGluZ3NfY29ubmVjdF90b19wZW5kaW5nX3RpdGxlOiAnQ29ubmVjdCB0byBHR01OJyxcbiAgICBzZXR0aW5nc19jb25uZWN0X3RvX2Nvbm5lY3RlZF90aXRsZTogJ0Nvbm5lY3RlZCB0byBHR01OJyxcbiAgICBzZXR0aW5nc19jb25uZWN0X3RvX3N1YnRpdGxlX2Vycm9yOiAnRXJyb3IgY29ubmVjdGluZyB0byBHR01OJyxcbiAgICBzZXR0aW5nc19uZXdfcmVzb3VyY2U6IFwiTmV3IEdXIFN0YXRpb25cIixcbiAgICBjb25uZWN0X3RvX3NlcnZpY2VfZGVzY3JpcHRpb246IFwiQ29ubmVjdCB0byBHR01OIHRvIGNyZWF0ZSBuZXcgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgYW5kIHNhdmUgcmVhZGluZ3MgZnJvbSB5b3VyIGRldmljZS5cIixcbiAgICBjb25uZWN0X3RvX3NlcnZpY2VfY29ubmVjdGVkX3Rlc3Q6IChmaWVsZE5hbWU6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZykgPT4gYFlvdSBhcmUgY29ubmVjdGVkIHRvIEdHTU4gd2l0aCB0aGUgJHtmaWVsZE5hbWV9OiAke3VzZXJuYW1lfWAsXG4gICAgY29ubmVjdF90b19zZXJ2aWNlX29yZ19zZWxlY3RvcjogXCJTZWxlY3QgYW4gb3JnYW5pc2F0aW9uXCIsXG4gICAgc3luY19sb2dpbl9tZXNzYWdlOiBcIkxvZ2luIHRvIHN5bmMgd2l0aCBHR01OXCIsXG4gICAgc3luY19zdGFydF9zeW5jX2J1dHRvbl9sb2FkaW5nOiBcIlN5bmNpbmcgd2l0aCBHR01OXCIsXG4gICAgc3luY19zZWN0aW9uX3Jlc291cmNlczogXCJHcm91bmR3YXRlciBTdGF0aW9uc1wiLFxuICAgIHN5bmNfZW1wdHlfaGVhZGluZzogXCJOb3RoaW5nIHRvIHN5bmMhXCIsXG4gICAgc3luY19lbXB0eV9jb250ZW50OiBcIlN0YXJ0IHRha2luZyByZWFkaW5ncyBvciBjcmVhdGluZyBncm91bmR3YXRlciBzdGF0aW9ucyB0byBnZXQgc3RhcnRlZC5cIixcbiAgICBuZXdfcmVhZGluZ190aW1lc2VyaWVzOiAnVGltZXNlcmllcycsXG4gICAgcmVzb3VyY2VfZGV0YWlsX2VtcHR5X2hlYWRpbmc6ICdZb3UgaGF2ZW5cXCd0IGZvdW5kIGFueSBncm91bmR3YXRlciBzdGF0aW9ucyB5ZXQuJyxcbiAgICByZXNvdXJjZV9kZXRhaWxfZW1wdHlfaGludDogJ1ByZXNzIHRoZSBzZWFyY2ggYnV0dG9uIG9yIGJyb3dzZSB0aGUgbWFwIHRvIGZpbmQgc29tZS4nLFxuICAgIG5ld19yZXNvdXJjZV9zYXZlZF9kaWFsb2c6IFwiU3VjY2Vzc2Z1bGx5IFNhdmVkIEdyb3VuZHdhdGVyIFN0YXRpb24hXCIsXG4gICAgbmV3X3Jlc291cmNlX3NhdmVkX2RpYWxvZ193YXJuaW5nOiBcIlNhdmVkIExvY2F0aW9uIExvY2FsbHkuIExvZ2luIHRvIEdHTU4gdG8gc3luYy5cIixcbiAgICByZXNvdXJjZV9uYW1lOiBcIkdyb3VuZHdhdGVyIFN0YXRpb25cIixcbiAgICBuZXdfcmVzb3VyY2VfYXNzZXRfdHlwZV9sYWJlbDogXCJBc3NldCBUeXBlXCIsXG4gICAgbmV3X3Jlc291cmNlX3N1Ym1pdF9idXR0b246IFwiU1VCTUlUXCIsXG4gICAgdGltZXNlcmllc19uYW1lX3RpdGxlOiAodHNOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIHN3aXRjaCAodHNOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnZ3dtYmdzJzogcmV0dXJuIGBHcm91bmR3YXRlciBsZXZlbCBiZWxvdyBncm91bmQgc3VyZmFjZWBcbiAgICAgICAgY2FzZSAnZ3dtbXNsJzpcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIGBHcm91bmR3YXRlciBsZXZlbCBhYm92ZSBtZWFuIHNlYSBsZXZlbGBcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgfVxufVxuXG5leHBvcnQgeyBnZ21uX2VuX0FVIH0iXX0=