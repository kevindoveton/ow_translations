"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ggmn_en_AU = void 0;

var _Types = require("../Types");

var ggmn_en_AU = {
  org: _Types.TranslationOrg.ggmn,
  overrides: {
    search_hint: 'Search for Groundwater Stations by their ID.',
    settings_sync_heading: "GGMN Sync",
    settings_connect_to_pending_title: 'Connect to GGMN',
    settings_connect_to_connected_title: 'Connected to GGMN',
    settings_connect_to_subtitle_error: 'Error connecting to GGMN',
    settings_new_resource: "New GW Station",
    connect_to_service_description: "Connect to GGMN to create new groundwater stations and save readings from your device.",
    connect_to_service_connected_test: function connect_to_service_connected_test(fieldName, username) {
      return "You are connected to GGMN with the ".concat(fieldName, ": ").concat(username);
    },
    connect_to_service_org_selector: "Select an organisation",
    sync_login_message: "Login to sync with GGMN",
    sync_start_sync_button_loading: "Syncing with GGMN",
    sync_section_resources: "Groundwater Stations",
    sync_empty_heading: "Nothing to sync!",
    sync_empty_content: "Start taking readings or creating groundwater stations to get started.",
    new_reading_timeseries: 'Timeseries',
    resource_detail_empty_heading: 'You haven\'t found any groundwater stations yet.',
    resource_detail_empty_hint: 'Press the search button or browse the map to find some.',
    new_resource_saved_dialog: "Successfully Saved Groundwater Station!",
    new_resource_saved_dialog_warning: "Saved Location Locally. Login to GGMN to sync.",
    resource_name: "Groundwater Station",
    new_resource_asset_type_label: "Asset Type",
    new_resource_submit_button: "SUBMIT",
    timeseries_name_title: function timeseries_name_title(tsName) {
      switch (tsName.toLowerCase()) {
        case 'gwmbgs':
          return "Groundwater level below ground surface";

        case 'gwmmsl':
        default:
          return "Groundwater level above mean sea level";
      }
    }
  }
};
exports.ggmn_en_AU = ggmn_en_AU;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZ21uX29sZC9lbl9BVS50cyJdLCJuYW1lcyI6WyJnZ21uX2VuX0FVIiwib3JnIiwiVHJhbnNsYXRpb25PcmciLCJnZ21uIiwib3ZlcnJpZGVzIiwic2VhcmNoX2hpbnQiLCJzZXR0aW5nc19zeW5jX2hlYWRpbmciLCJzZXR0aW5nc19jb25uZWN0X3RvX3BlbmRpbmdfdGl0bGUiLCJzZXR0aW5nc19jb25uZWN0X3RvX2Nvbm5lY3RlZF90aXRsZSIsInNldHRpbmdzX2Nvbm5lY3RfdG9fc3VidGl0bGVfZXJyb3IiLCJzZXR0aW5nc19uZXdfcmVzb3VyY2UiLCJjb25uZWN0X3RvX3NlcnZpY2VfZGVzY3JpcHRpb24iLCJjb25uZWN0X3RvX3NlcnZpY2VfY29ubmVjdGVkX3Rlc3QiLCJmaWVsZE5hbWUiLCJ1c2VybmFtZSIsImNvbm5lY3RfdG9fc2VydmljZV9vcmdfc2VsZWN0b3IiLCJzeW5jX2xvZ2luX21lc3NhZ2UiLCJzeW5jX3N0YXJ0X3N5bmNfYnV0dG9uX2xvYWRpbmciLCJzeW5jX3NlY3Rpb25fcmVzb3VyY2VzIiwic3luY19lbXB0eV9oZWFkaW5nIiwic3luY19lbXB0eV9jb250ZW50IiwibmV3X3JlYWRpbmdfdGltZXNlcmllcyIsInJlc291cmNlX2RldGFpbF9lbXB0eV9oZWFkaW5nIiwicmVzb3VyY2VfZGV0YWlsX2VtcHR5X2hpbnQiLCJuZXdfcmVzb3VyY2Vfc2F2ZWRfZGlhbG9nIiwibmV3X3Jlc291cmNlX3NhdmVkX2RpYWxvZ193YXJuaW5nIiwicmVzb3VyY2VfbmFtZSIsIm5ld19yZXNvdXJjZV9hc3NldF90eXBlX2xhYmVsIiwibmV3X3Jlc291cmNlX3N1Ym1pdF9idXR0b24iLCJ0aW1lc2VyaWVzX25hbWVfdGl0bGUiLCJ0c05hbWUiLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLElBQU1BLFVBQW1DLEdBQUk7QUFDM0NDLEVBQUFBLEdBQUcsRUFBRUMsc0JBQWVDLElBRHVCO0FBRTNDQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsV0FBVyxFQUFFLDhDQURKO0FBRVRDLElBQUFBLHFCQUFxQixFQUFFLFdBRmQ7QUFHVEMsSUFBQUEsaUNBQWlDLEVBQUUsaUJBSDFCO0FBSVRDLElBQUFBLG1DQUFtQyxFQUFFLG1CQUo1QjtBQUtUQyxJQUFBQSxrQ0FBa0MsRUFBRSwwQkFMM0I7QUFNVEMsSUFBQUEscUJBQXFCLEVBQUUsZ0JBTmQ7QUFPVEMsSUFBQUEsOEJBQThCLEVBQUUsd0ZBUHZCO0FBUVRDLElBQUFBLGlDQUFpQyxFQUFFLDJDQUFDQyxTQUFELEVBQW9CQyxRQUFwQjtBQUFBLDBEQUErRUQsU0FBL0UsZUFBNkZDLFFBQTdGO0FBQUEsS0FSMUI7QUFTVEMsSUFBQUEsK0JBQStCLEVBQUUsd0JBVHhCO0FBVVRDLElBQUFBLGtCQUFrQixFQUFFLHlCQVZYO0FBV1RDLElBQUFBLDhCQUE4QixFQUFFLG1CQVh2QjtBQVlUQyxJQUFBQSxzQkFBc0IsRUFBRSxzQkFaZjtBQWFUQyxJQUFBQSxrQkFBa0IsRUFBRSxrQkFiWDtBQWNUQyxJQUFBQSxrQkFBa0IsRUFBRSx3RUFkWDtBQWVUQyxJQUFBQSxzQkFBc0IsRUFBRSxZQWZmO0FBZ0JUQyxJQUFBQSw2QkFBNkIsRUFBRSxrREFoQnRCO0FBaUJUQyxJQUFBQSwwQkFBMEIsRUFBRSx5REFqQm5CO0FBa0JUQyxJQUFBQSx5QkFBeUIsRUFBRSx5Q0FsQmxCO0FBbUJUQyxJQUFBQSxpQ0FBaUMsRUFBRSxnREFuQjFCO0FBb0JUQyxJQUFBQSxhQUFhLEVBQUUscUJBcEJOO0FBcUJUQyxJQUFBQSw2QkFBNkIsRUFBRSxZQXJCdEI7QUFzQlRDLElBQUFBLDBCQUEwQixFQUFFLFFBdEJuQjtBQXVCVEMsSUFBQUEscUJBQXFCLEVBQUUsK0JBQUNDLE1BQUQsRUFBb0I7QUFDekMsY0FBUUEsTUFBTSxDQUFDQyxXQUFQLEVBQVI7QUFDRSxhQUFLLFFBQUw7QUFBZTs7QUFDZixhQUFLLFFBQUw7QUFDQTtBQUFTO0FBSFg7QUFLRDtBQTdCUTtBQUZnQyxDQUE3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0aW9uT3JnLCBUcmFuc2xhdGlvbk92ZXJyaWRlRmlsZSB9IGZyb20gXCIuLi9UeXBlc1wiO1xuXG5jb25zdCBnZ21uX2VuX0FVOiBUcmFuc2xhdGlvbk92ZXJyaWRlRmlsZSAgPSB7XG4gIG9yZzogVHJhbnNsYXRpb25PcmcuZ2dtbixcbiAgb3ZlcnJpZGVzOiB7XG4gICAgc2VhcmNoX2hpbnQ6ICdTZWFyY2ggZm9yIEdyb3VuZHdhdGVyIFN0YXRpb25zIGJ5IHRoZWlyIElELicsXG4gICAgc2V0dGluZ3Nfc3luY19oZWFkaW5nOiBcIkdHTU4gU3luY1wiLFxuICAgIHNldHRpbmdzX2Nvbm5lY3RfdG9fcGVuZGluZ190aXRsZTogJ0Nvbm5lY3QgdG8gR0dNTicsXG4gICAgc2V0dGluZ3NfY29ubmVjdF90b19jb25uZWN0ZWRfdGl0bGU6ICdDb25uZWN0ZWQgdG8gR0dNTicsXG4gICAgc2V0dGluZ3NfY29ubmVjdF90b19zdWJ0aXRsZV9lcnJvcjogJ0Vycm9yIGNvbm5lY3RpbmcgdG8gR0dNTicsXG4gICAgc2V0dGluZ3NfbmV3X3Jlc291cmNlOiBcIk5ldyBHVyBTdGF0aW9uXCIsXG4gICAgY29ubmVjdF90b19zZXJ2aWNlX2Rlc2NyaXB0aW9uOiBcIkNvbm5lY3QgdG8gR0dNTiB0byBjcmVhdGUgbmV3IGdyb3VuZHdhdGVyIHN0YXRpb25zIGFuZCBzYXZlIHJlYWRpbmdzIGZyb20geW91ciBkZXZpY2UuXCIsXG4gICAgY29ubmVjdF90b19zZXJ2aWNlX2Nvbm5lY3RlZF90ZXN0OiAoZmllbGROYW1lOiBzdHJpbmcsIHVzZXJuYW1lOiBzdHJpbmcpID0+IGBZb3UgYXJlIGNvbm5lY3RlZCB0byBHR01OIHdpdGggdGhlICR7ZmllbGROYW1lfTogJHt1c2VybmFtZX1gLFxuICAgIGNvbm5lY3RfdG9fc2VydmljZV9vcmdfc2VsZWN0b3I6IFwiU2VsZWN0IGFuIG9yZ2FuaXNhdGlvblwiLFxuICAgIHN5bmNfbG9naW5fbWVzc2FnZTogXCJMb2dpbiB0byBzeW5jIHdpdGggR0dNTlwiLFxuICAgIHN5bmNfc3RhcnRfc3luY19idXR0b25fbG9hZGluZzogXCJTeW5jaW5nIHdpdGggR0dNTlwiLFxuICAgIHN5bmNfc2VjdGlvbl9yZXNvdXJjZXM6IFwiR3JvdW5kd2F0ZXIgU3RhdGlvbnNcIixcbiAgICBzeW5jX2VtcHR5X2hlYWRpbmc6IFwiTm90aGluZyB0byBzeW5jIVwiLFxuICAgIHN5bmNfZW1wdHlfY29udGVudDogXCJTdGFydCB0YWtpbmcgcmVhZGluZ3Mgb3IgY3JlYXRpbmcgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgdG8gZ2V0IHN0YXJ0ZWQuXCIsXG4gICAgbmV3X3JlYWRpbmdfdGltZXNlcmllczogJ1RpbWVzZXJpZXMnLFxuICAgIHJlc291cmNlX2RldGFpbF9lbXB0eV9oZWFkaW5nOiAnWW91IGhhdmVuXFwndCBmb3VuZCBhbnkgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgeWV0LicsXG4gICAgcmVzb3VyY2VfZGV0YWlsX2VtcHR5X2hpbnQ6ICdQcmVzcyB0aGUgc2VhcmNoIGJ1dHRvbiBvciBicm93c2UgdGhlIG1hcCB0byBmaW5kIHNvbWUuJyxcbiAgICBuZXdfcmVzb3VyY2Vfc2F2ZWRfZGlhbG9nOiBcIlN1Y2Nlc3NmdWxseSBTYXZlZCBHcm91bmR3YXRlciBTdGF0aW9uIVwiLFxuICAgIG5ld19yZXNvdXJjZV9zYXZlZF9kaWFsb2dfd2FybmluZzogXCJTYXZlZCBMb2NhdGlvbiBMb2NhbGx5LiBMb2dpbiB0byBHR01OIHRvIHN5bmMuXCIsXG4gICAgcmVzb3VyY2VfbmFtZTogXCJHcm91bmR3YXRlciBTdGF0aW9uXCIsXG4gICAgbmV3X3Jlc291cmNlX2Fzc2V0X3R5cGVfbGFiZWw6IFwiQXNzZXQgVHlwZVwiLFxuICAgIG5ld19yZXNvdXJjZV9zdWJtaXRfYnV0dG9uOiBcIlNVQk1JVFwiLFxuICAgIHRpbWVzZXJpZXNfbmFtZV90aXRsZTogKHRzTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICBzd2l0Y2ggKHRzTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ2d3bWJncyc6IHJldHVybiBgR3JvdW5kd2F0ZXIgbGV2ZWwgYmVsb3cgZ3JvdW5kIHN1cmZhY2VgXG4gICAgICAgIGNhc2UgJ2d3bW1zbCc6XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBgR3JvdW5kd2F0ZXIgbGV2ZWwgYWJvdmUgbWVhbiBzZWEgbGV2ZWxgXG4gICAgICB9XG4gICAgfSxcblxuXG4gIH1cbn1cblxuZXhwb3J0IHsgZ2dtbl9lbl9BVSB9Il19