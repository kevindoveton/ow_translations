"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ggmn_es_ES = void 0;

var _Types = require("../Types");

var ggmn_es_ES = {
  org: _Types.TranslationOrg.ggmn,
  overrides: {
    search_hint: 'Search for Groundwater Stations by their ID.',
    settings_sync_heading: "GGMN Sync",
    settings_connect_to_pending_title: 'Connect to GGMN',
    settings_connect_to_connected_title: 'Connected to GGMN',
    settings_connect_to_subtitle_error: 'Error connecting to GGMN',
    settings_new_resource: "New GW Station",
    connect_to_service_description: "Connect to GGMN to create new groundwater stations and save readings from your device.",
    connect_to_service_connected_test: function connect_to_service_connected_test(fieldName, username) {
      return "You are connected to GGMN with the ".concat(fieldName, ": ").concat(username);
    },
    connect_to_service_org_selector: "Select an organisation",
    sync_login_message: "Login to sync with GGMN",
    sync_start_sync_button_loading: "Syncing with GGMN",
    sync_section_resources: "Groundwater Stations",
    sync_empty_heading: "Nothing to sync!",
    sync_empty_content: "Start taking readings or creating groundwater stations to get started.",
    new_reading_timeseries: 'Timeseries',
    resource_detail_empty_heading: 'You haven\'t found any groundwater stations yet.',
    resource_detail_empty_hint: 'Press the search button or browse the map to find some.',
    new_resource_saved_dialog: "Successfully Saved Groundwater Station!",
    new_resource_saved_dialog_warning: "Saved Location Locally. Login to GGMN to sync.",
    resource_name: "Groundwater Station",
    new_resource_asset_type_label: "Asset Type",
    new_resource_submit_button: "SUBMIT",
    timeseries_name_title: function timeseries_name_title(tsName) {
      switch (tsName.toLowerCase()) {
        case 'gwmbgs':
          return "Groundwater level below ground surface";

        case 'gwmmsl':
        default:
          return "Groundwater level above mean sea level";
      }
    }
  }
};
exports.ggmn_es_ES = ggmn_es_ES;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZ21uL2VzX0VTLnRzIl0sIm5hbWVzIjpbImdnbW5fZXNfRVMiLCJvcmciLCJUcmFuc2xhdGlvbk9yZyIsImdnbW4iLCJvdmVycmlkZXMiLCJzZWFyY2hfaGludCIsInNldHRpbmdzX3N5bmNfaGVhZGluZyIsInNldHRpbmdzX2Nvbm5lY3RfdG9fcGVuZGluZ190aXRsZSIsInNldHRpbmdzX2Nvbm5lY3RfdG9fY29ubmVjdGVkX3RpdGxlIiwic2V0dGluZ3NfY29ubmVjdF90b19zdWJ0aXRsZV9lcnJvciIsInNldHRpbmdzX25ld19yZXNvdXJjZSIsImNvbm5lY3RfdG9fc2VydmljZV9kZXNjcmlwdGlvbiIsImNvbm5lY3RfdG9fc2VydmljZV9jb25uZWN0ZWRfdGVzdCIsImZpZWxkTmFtZSIsInVzZXJuYW1lIiwiY29ubmVjdF90b19zZXJ2aWNlX29yZ19zZWxlY3RvciIsInN5bmNfbG9naW5fbWVzc2FnZSIsInN5bmNfc3RhcnRfc3luY19idXR0b25fbG9hZGluZyIsInN5bmNfc2VjdGlvbl9yZXNvdXJjZXMiLCJzeW5jX2VtcHR5X2hlYWRpbmciLCJzeW5jX2VtcHR5X2NvbnRlbnQiLCJuZXdfcmVhZGluZ190aW1lc2VyaWVzIiwicmVzb3VyY2VfZGV0YWlsX2VtcHR5X2hlYWRpbmciLCJyZXNvdXJjZV9kZXRhaWxfZW1wdHlfaGludCIsIm5ld19yZXNvdXJjZV9zYXZlZF9kaWFsb2ciLCJuZXdfcmVzb3VyY2Vfc2F2ZWRfZGlhbG9nX3dhcm5pbmciLCJyZXNvdXJjZV9uYW1lIiwibmV3X3Jlc291cmNlX2Fzc2V0X3R5cGVfbGFiZWwiLCJuZXdfcmVzb3VyY2Vfc3VibWl0X2J1dHRvbiIsInRpbWVzZXJpZXNfbmFtZV90aXRsZSIsInRzTmFtZSIsInRvTG93ZXJDYXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsSUFBTUEsVUFBbUMsR0FBRztBQUMxQ0MsRUFBQUEsR0FBRyxFQUFFQyxzQkFBZUMsSUFEc0I7QUFFMUNDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxXQUFXLEVBQUUsOENBREo7QUFFVEMsSUFBQUEscUJBQXFCLEVBQUUsV0FGZDtBQUdUQyxJQUFBQSxpQ0FBaUMsRUFBRSxpQkFIMUI7QUFJVEMsSUFBQUEsbUNBQW1DLEVBQUUsbUJBSjVCO0FBS1RDLElBQUFBLGtDQUFrQyxFQUFFLDBCQUwzQjtBQU1UQyxJQUFBQSxxQkFBcUIsRUFBRSxnQkFOZDtBQU9UQyxJQUFBQSw4QkFBOEIsRUFBRSx3RkFQdkI7QUFRVEMsSUFBQUEsaUNBQWlDLEVBQUUsMkNBQUNDLFNBQUQsRUFBb0JDLFFBQXBCO0FBQUEsMERBQStFRCxTQUEvRSxlQUE2RkMsUUFBN0Y7QUFBQSxLQVIxQjtBQVNUQyxJQUFBQSwrQkFBK0IsRUFBRSx3QkFUeEI7QUFVVEMsSUFBQUEsa0JBQWtCLEVBQUUseUJBVlg7QUFXVEMsSUFBQUEsOEJBQThCLEVBQUUsbUJBWHZCO0FBWVRDLElBQUFBLHNCQUFzQixFQUFFLHNCQVpmO0FBYVRDLElBQUFBLGtCQUFrQixFQUFFLGtCQWJYO0FBY1RDLElBQUFBLGtCQUFrQixFQUFFLHdFQWRYO0FBZVRDLElBQUFBLHNCQUFzQixFQUFFLFlBZmY7QUFnQlRDLElBQUFBLDZCQUE2QixFQUFFLGtEQWhCdEI7QUFpQlRDLElBQUFBLDBCQUEwQixFQUFFLHlEQWpCbkI7QUFrQlRDLElBQUFBLHlCQUF5QixFQUFFLHlDQWxCbEI7QUFtQlRDLElBQUFBLGlDQUFpQyxFQUFFLGdEQW5CMUI7QUFvQlRDLElBQUFBLGFBQWEsRUFBRSxxQkFwQk47QUFxQlRDLElBQUFBLDZCQUE2QixFQUFFLFlBckJ0QjtBQXNCVEMsSUFBQUEsMEJBQTBCLEVBQUUsUUF0Qm5CO0FBdUJUQyxJQUFBQSxxQkFBcUIsRUFBRSwrQkFBQ0MsTUFBRCxFQUFvQjtBQUN6QyxjQUFRQSxNQUFNLENBQUNDLFdBQVAsRUFBUjtBQUNFLGFBQUssUUFBTDtBQUFlOztBQUNmLGFBQUssUUFBTDtBQUNBO0FBQVM7QUFIWDtBQUtEO0FBN0JRO0FBRitCLENBQTVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNsYXRpb25PcmcsIFRyYW5zbGF0aW9uT3ZlcnJpZGVGaWxlIH0gZnJvbSBcIi4uL1R5cGVzXCI7XG5cbmNvbnN0IGdnbW5fZXNfRVM6IFRyYW5zbGF0aW9uT3ZlcnJpZGVGaWxlID0ge1xuICBvcmc6IFRyYW5zbGF0aW9uT3JnLmdnbW4sXG4gIG92ZXJyaWRlczoge1xuICAgIHNlYXJjaF9oaW50OiAnU2VhcmNoIGZvciBHcm91bmR3YXRlciBTdGF0aW9ucyBieSB0aGVpciBJRC4nLFxuICAgIHNldHRpbmdzX3N5bmNfaGVhZGluZzogXCJHR01OIFN5bmNcIixcbiAgICBzZXR0aW5nc19jb25uZWN0X3RvX3BlbmRpbmdfdGl0bGU6ICdDb25uZWN0IHRvIEdHTU4nLFxuICAgIHNldHRpbmdzX2Nvbm5lY3RfdG9fY29ubmVjdGVkX3RpdGxlOiAnQ29ubmVjdGVkIHRvIEdHTU4nLFxuICAgIHNldHRpbmdzX2Nvbm5lY3RfdG9fc3VidGl0bGVfZXJyb3I6ICdFcnJvciBjb25uZWN0aW5nIHRvIEdHTU4nLFxuICAgIHNldHRpbmdzX25ld19yZXNvdXJjZTogXCJOZXcgR1cgU3RhdGlvblwiLFxuICAgIGNvbm5lY3RfdG9fc2VydmljZV9kZXNjcmlwdGlvbjogXCJDb25uZWN0IHRvIEdHTU4gdG8gY3JlYXRlIG5ldyBncm91bmR3YXRlciBzdGF0aW9ucyBhbmQgc2F2ZSByZWFkaW5ncyBmcm9tIHlvdXIgZGV2aWNlLlwiLFxuICAgIGNvbm5lY3RfdG9fc2VydmljZV9jb25uZWN0ZWRfdGVzdDogKGZpZWxkTmFtZTogc3RyaW5nLCB1c2VybmFtZTogc3RyaW5nKSA9PiBgWW91IGFyZSBjb25uZWN0ZWQgdG8gR0dNTiB3aXRoIHRoZSAke2ZpZWxkTmFtZX06ICR7dXNlcm5hbWV9YCxcbiAgICBjb25uZWN0X3RvX3NlcnZpY2Vfb3JnX3NlbGVjdG9yOiBcIlNlbGVjdCBhbiBvcmdhbmlzYXRpb25cIixcbiAgICBzeW5jX2xvZ2luX21lc3NhZ2U6IFwiTG9naW4gdG8gc3luYyB3aXRoIEdHTU5cIixcbiAgICBzeW5jX3N0YXJ0X3N5bmNfYnV0dG9uX2xvYWRpbmc6IFwiU3luY2luZyB3aXRoIEdHTU5cIixcbiAgICBzeW5jX3NlY3Rpb25fcmVzb3VyY2VzOiBcIkdyb3VuZHdhdGVyIFN0YXRpb25zXCIsXG4gICAgc3luY19lbXB0eV9oZWFkaW5nOiBcIk5vdGhpbmcgdG8gc3luYyFcIixcbiAgICBzeW5jX2VtcHR5X2NvbnRlbnQ6IFwiU3RhcnQgdGFraW5nIHJlYWRpbmdzIG9yIGNyZWF0aW5nIGdyb3VuZHdhdGVyIHN0YXRpb25zIHRvIGdldCBzdGFydGVkLlwiLFxuICAgIG5ld19yZWFkaW5nX3RpbWVzZXJpZXM6ICdUaW1lc2VyaWVzJyxcbiAgICByZXNvdXJjZV9kZXRhaWxfZW1wdHlfaGVhZGluZzogJ1lvdSBoYXZlblxcJ3QgZm91bmQgYW55IGdyb3VuZHdhdGVyIHN0YXRpb25zIHlldC4nLFxuICAgIHJlc291cmNlX2RldGFpbF9lbXB0eV9oaW50OiAnUHJlc3MgdGhlIHNlYXJjaCBidXR0b24gb3IgYnJvd3NlIHRoZSBtYXAgdG8gZmluZCBzb21lLicsXG4gICAgbmV3X3Jlc291cmNlX3NhdmVkX2RpYWxvZzogXCJTdWNjZXNzZnVsbHkgU2F2ZWQgR3JvdW5kd2F0ZXIgU3RhdGlvbiFcIixcbiAgICBuZXdfcmVzb3VyY2Vfc2F2ZWRfZGlhbG9nX3dhcm5pbmc6IFwiU2F2ZWQgTG9jYXRpb24gTG9jYWxseS4gTG9naW4gdG8gR0dNTiB0byBzeW5jLlwiLFxuICAgIHJlc291cmNlX25hbWU6IFwiR3JvdW5kd2F0ZXIgU3RhdGlvblwiLFxuICAgIG5ld19yZXNvdXJjZV9hc3NldF90eXBlX2xhYmVsOiBcIkFzc2V0IFR5cGVcIixcbiAgICBuZXdfcmVzb3VyY2Vfc3VibWl0X2J1dHRvbjogXCJTVUJNSVRcIixcbiAgICB0aW1lc2VyaWVzX25hbWVfdGl0bGU6ICh0c05hbWU6IHN0cmluZykgPT4ge1xuICAgICAgc3dpdGNoICh0c05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlICdnd21iZ3MnOiByZXR1cm4gYEdyb3VuZHdhdGVyIGxldmVsIGJlbG93IGdyb3VuZCBzdXJmYWNlYFxuICAgICAgICBjYXNlICdnd21tc2wnOlxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gYEdyb3VuZHdhdGVyIGxldmVsIGFib3ZlIG1lYW4gc2VhIGxldmVsYFxuICAgICAgfVxuICAgIH0sXG4gIH1cbn1cblxuZXhwb3J0IHsgZ2dtbl9lc19FUyB9Il19