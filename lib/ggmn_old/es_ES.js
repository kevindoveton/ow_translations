"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ggmn_es_ES = void 0;

var _Types = require("../Types");

var ggmn_es_ES = {
  org: _Types.TranslationOrg.ggmn,
  overrides: {
    search_hint: 'Search for Groundwater Stations by their ID.',
    settings_sync_heading: "GGMN Sync",
    settings_connect_to_pending_title: 'Connect to GGMN',
    settings_connect_to_connected_title: 'Connected to GGMN',
    settings_connect_to_subtitle_error: 'Error connecting to GGMN',
    settings_new_resource: "New GW Station",
    connect_to_service_description: "Connect to GGMN to create new groundwater stations and save readings from your device.",
    connect_to_service_connected_test: function connect_to_service_connected_test(fieldName, username) {
      return "You are connected to GGMN with the ".concat(fieldName, ": ").concat(username);
    },
    connect_to_service_org_selector: "Select an organisation",
    sync_login_message: "Login to sync with GGMN",
    sync_start_sync_button_loading: "Syncing with GGMN",
    sync_section_resources: "Groundwater Stations",
    sync_empty_heading: "Nothing to sync!",
    sync_empty_content: "Start taking readings or creating groundwater stations to get started.",
    new_reading_timeseries: 'Timeseries',
    resource_detail_empty_heading: 'You haven\'t found any groundwater stations yet.',
    resource_detail_empty_hint: 'Press the search button or browse the map to find some.',
    new_resource_saved_dialog: "Successfully Saved Groundwater Station!",
    new_resource_saved_dialog_warning: "Saved Location Locally. Login to GGMN to sync.",
    resource_name: "Groundwater Station",
    new_resource_asset_type_label: "Asset Type",
    new_resource_submit_button: "SUBMIT",
    timeseries_name_title: function timeseries_name_title(tsName) {
      switch (tsName.toLowerCase()) {
        case 'gwmbgs':
          return "Groundwater level below ground surface";

        case 'gwmmsl':
        default:
          return "Groundwater level above mean sea level";
      }
    }
  }
};
exports.ggmn_es_ES = ggmn_es_ES;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZ21uX29sZC9lc19FUy50cyJdLCJuYW1lcyI6WyJnZ21uX2VzX0VTIiwib3JnIiwiVHJhbnNsYXRpb25PcmciLCJnZ21uIiwib3ZlcnJpZGVzIiwic2VhcmNoX2hpbnQiLCJzZXR0aW5nc19zeW5jX2hlYWRpbmciLCJzZXR0aW5nc19jb25uZWN0X3RvX3BlbmRpbmdfdGl0bGUiLCJzZXR0aW5nc19jb25uZWN0X3RvX2Nvbm5lY3RlZF90aXRsZSIsInNldHRpbmdzX2Nvbm5lY3RfdG9fc3VidGl0bGVfZXJyb3IiLCJzZXR0aW5nc19uZXdfcmVzb3VyY2UiLCJjb25uZWN0X3RvX3NlcnZpY2VfZGVzY3JpcHRpb24iLCJjb25uZWN0X3RvX3NlcnZpY2VfY29ubmVjdGVkX3Rlc3QiLCJmaWVsZE5hbWUiLCJ1c2VybmFtZSIsImNvbm5lY3RfdG9fc2VydmljZV9vcmdfc2VsZWN0b3IiLCJzeW5jX2xvZ2luX21lc3NhZ2UiLCJzeW5jX3N0YXJ0X3N5bmNfYnV0dG9uX2xvYWRpbmciLCJzeW5jX3NlY3Rpb25fcmVzb3VyY2VzIiwic3luY19lbXB0eV9oZWFkaW5nIiwic3luY19lbXB0eV9jb250ZW50IiwibmV3X3JlYWRpbmdfdGltZXNlcmllcyIsInJlc291cmNlX2RldGFpbF9lbXB0eV9oZWFkaW5nIiwicmVzb3VyY2VfZGV0YWlsX2VtcHR5X2hpbnQiLCJuZXdfcmVzb3VyY2Vfc2F2ZWRfZGlhbG9nIiwibmV3X3Jlc291cmNlX3NhdmVkX2RpYWxvZ193YXJuaW5nIiwicmVzb3VyY2VfbmFtZSIsIm5ld19yZXNvdXJjZV9hc3NldF90eXBlX2xhYmVsIiwibmV3X3Jlc291cmNlX3N1Ym1pdF9idXR0b24iLCJ0aW1lc2VyaWVzX25hbWVfdGl0bGUiLCJ0c05hbWUiLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLElBQU1BLFVBQW1DLEdBQUc7QUFDMUNDLEVBQUFBLEdBQUcsRUFBRUMsc0JBQWVDLElBRHNCO0FBRTFDQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsV0FBVyxFQUFFLDhDQURKO0FBRVRDLElBQUFBLHFCQUFxQixFQUFFLFdBRmQ7QUFHVEMsSUFBQUEsaUNBQWlDLEVBQUUsaUJBSDFCO0FBSVRDLElBQUFBLG1DQUFtQyxFQUFFLG1CQUo1QjtBQUtUQyxJQUFBQSxrQ0FBa0MsRUFBRSwwQkFMM0I7QUFNVEMsSUFBQUEscUJBQXFCLEVBQUUsZ0JBTmQ7QUFPVEMsSUFBQUEsOEJBQThCLEVBQUUsd0ZBUHZCO0FBUVRDLElBQUFBLGlDQUFpQyxFQUFFLDJDQUFDQyxTQUFELEVBQW9CQyxRQUFwQjtBQUFBLDBEQUErRUQsU0FBL0UsZUFBNkZDLFFBQTdGO0FBQUEsS0FSMUI7QUFTVEMsSUFBQUEsK0JBQStCLEVBQUUsd0JBVHhCO0FBVVRDLElBQUFBLGtCQUFrQixFQUFFLHlCQVZYO0FBV1RDLElBQUFBLDhCQUE4QixFQUFFLG1CQVh2QjtBQVlUQyxJQUFBQSxzQkFBc0IsRUFBRSxzQkFaZjtBQWFUQyxJQUFBQSxrQkFBa0IsRUFBRSxrQkFiWDtBQWNUQyxJQUFBQSxrQkFBa0IsRUFBRSx3RUFkWDtBQWVUQyxJQUFBQSxzQkFBc0IsRUFBRSxZQWZmO0FBZ0JUQyxJQUFBQSw2QkFBNkIsRUFBRSxrREFoQnRCO0FBaUJUQyxJQUFBQSwwQkFBMEIsRUFBRSx5REFqQm5CO0FBa0JUQyxJQUFBQSx5QkFBeUIsRUFBRSx5Q0FsQmxCO0FBbUJUQyxJQUFBQSxpQ0FBaUMsRUFBRSxnREFuQjFCO0FBb0JUQyxJQUFBQSxhQUFhLEVBQUUscUJBcEJOO0FBcUJUQyxJQUFBQSw2QkFBNkIsRUFBRSxZQXJCdEI7QUFzQlRDLElBQUFBLDBCQUEwQixFQUFFLFFBdEJuQjtBQXVCVEMsSUFBQUEscUJBQXFCLEVBQUUsK0JBQUNDLE1BQUQsRUFBb0I7QUFDekMsY0FBUUEsTUFBTSxDQUFDQyxXQUFQLEVBQVI7QUFDRSxhQUFLLFFBQUw7QUFBZTs7QUFDZixhQUFLLFFBQUw7QUFDQTtBQUFTO0FBSFg7QUFLRDtBQTdCUTtBQUYrQixDQUE1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0aW9uT3JnLCBUcmFuc2xhdGlvbk92ZXJyaWRlRmlsZSB9IGZyb20gXCIuLi9UeXBlc1wiO1xuXG5jb25zdCBnZ21uX2VzX0VTOiBUcmFuc2xhdGlvbk92ZXJyaWRlRmlsZSA9IHtcbiAgb3JnOiBUcmFuc2xhdGlvbk9yZy5nZ21uLFxuICBvdmVycmlkZXM6IHtcbiAgICBzZWFyY2hfaGludDogJ1NlYXJjaCBmb3IgR3JvdW5kd2F0ZXIgU3RhdGlvbnMgYnkgdGhlaXIgSUQuJyxcbiAgICBzZXR0aW5nc19zeW5jX2hlYWRpbmc6IFwiR0dNTiBTeW5jXCIsXG4gICAgc2V0dGluZ3NfY29ubmVjdF90b19wZW5kaW5nX3RpdGxlOiAnQ29ubmVjdCB0byBHR01OJyxcbiAgICBzZXR0aW5nc19jb25uZWN0X3RvX2Nvbm5lY3RlZF90aXRsZTogJ0Nvbm5lY3RlZCB0byBHR01OJyxcbiAgICBzZXR0aW5nc19jb25uZWN0X3RvX3N1YnRpdGxlX2Vycm9yOiAnRXJyb3IgY29ubmVjdGluZyB0byBHR01OJyxcbiAgICBzZXR0aW5nc19uZXdfcmVzb3VyY2U6IFwiTmV3IEdXIFN0YXRpb25cIixcbiAgICBjb25uZWN0X3RvX3NlcnZpY2VfZGVzY3JpcHRpb246IFwiQ29ubmVjdCB0byBHR01OIHRvIGNyZWF0ZSBuZXcgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgYW5kIHNhdmUgcmVhZGluZ3MgZnJvbSB5b3VyIGRldmljZS5cIixcbiAgICBjb25uZWN0X3RvX3NlcnZpY2VfY29ubmVjdGVkX3Rlc3Q6IChmaWVsZE5hbWU6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZykgPT4gYFlvdSBhcmUgY29ubmVjdGVkIHRvIEdHTU4gd2l0aCB0aGUgJHtmaWVsZE5hbWV9OiAke3VzZXJuYW1lfWAsXG4gICAgY29ubmVjdF90b19zZXJ2aWNlX29yZ19zZWxlY3RvcjogXCJTZWxlY3QgYW4gb3JnYW5pc2F0aW9uXCIsXG4gICAgc3luY19sb2dpbl9tZXNzYWdlOiBcIkxvZ2luIHRvIHN5bmMgd2l0aCBHR01OXCIsXG4gICAgc3luY19zdGFydF9zeW5jX2J1dHRvbl9sb2FkaW5nOiBcIlN5bmNpbmcgd2l0aCBHR01OXCIsXG4gICAgc3luY19zZWN0aW9uX3Jlc291cmNlczogXCJHcm91bmR3YXRlciBTdGF0aW9uc1wiLFxuICAgIHN5bmNfZW1wdHlfaGVhZGluZzogXCJOb3RoaW5nIHRvIHN5bmMhXCIsXG4gICAgc3luY19lbXB0eV9jb250ZW50OiBcIlN0YXJ0IHRha2luZyByZWFkaW5ncyBvciBjcmVhdGluZyBncm91bmR3YXRlciBzdGF0aW9ucyB0byBnZXQgc3RhcnRlZC5cIixcbiAgICBuZXdfcmVhZGluZ190aW1lc2VyaWVzOiAnVGltZXNlcmllcycsXG4gICAgcmVzb3VyY2VfZGV0YWlsX2VtcHR5X2hlYWRpbmc6ICdZb3UgaGF2ZW5cXCd0IGZvdW5kIGFueSBncm91bmR3YXRlciBzdGF0aW9ucyB5ZXQuJyxcbiAgICByZXNvdXJjZV9kZXRhaWxfZW1wdHlfaGludDogJ1ByZXNzIHRoZSBzZWFyY2ggYnV0dG9uIG9yIGJyb3dzZSB0aGUgbWFwIHRvIGZpbmQgc29tZS4nLFxuICAgIG5ld19yZXNvdXJjZV9zYXZlZF9kaWFsb2c6IFwiU3VjY2Vzc2Z1bGx5IFNhdmVkIEdyb3VuZHdhdGVyIFN0YXRpb24hXCIsXG4gICAgbmV3X3Jlc291cmNlX3NhdmVkX2RpYWxvZ193YXJuaW5nOiBcIlNhdmVkIExvY2F0aW9uIExvY2FsbHkuIExvZ2luIHRvIEdHTU4gdG8gc3luYy5cIixcbiAgICByZXNvdXJjZV9uYW1lOiBcIkdyb3VuZHdhdGVyIFN0YXRpb25cIixcbiAgICBuZXdfcmVzb3VyY2VfYXNzZXRfdHlwZV9sYWJlbDogXCJBc3NldCBUeXBlXCIsXG4gICAgbmV3X3Jlc291cmNlX3N1Ym1pdF9idXR0b246IFwiU1VCTUlUXCIsXG4gICAgdGltZXNlcmllc19uYW1lX3RpdGxlOiAodHNOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIHN3aXRjaCAodHNOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnZ3dtYmdzJzogcmV0dXJuIGBHcm91bmR3YXRlciBsZXZlbCBiZWxvdyBncm91bmQgc3VyZmFjZWBcbiAgICAgICAgY2FzZSAnZ3dtbXNsJzpcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIGBHcm91bmR3YXRlciBsZXZlbCBhYm92ZSBtZWFuIHNlYSBsZXZlbGBcbiAgICAgIH1cbiAgICB9LFxuICB9XG59XG5cbmV4cG9ydCB7IGdnbW5fZXNfRVMgfSJdfQ==