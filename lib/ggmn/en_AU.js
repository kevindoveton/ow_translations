"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ggmn_en_AU = void 0;

var _Types = require("../Types");

/**
 * Do not edit this file directly. 
 * Instead, edit the appropriate spreadsheet 
 * https://docs.google.com/spreadsheets/d/102zLqEWj4xlqqNgVUFCiMLqdcvaLY6GntS1xmlHdAE8/edit#gid=0
 * and recompile in order to change these fields
 */
var ggmn_en_AU = {
  org: _Types.TranslationOrg.ggmn,
  overrides: {
    settings_connect_to_pending_title: "Connect to GGMN",
    settings_connect_to_connected_title: "Connected to GGMN",
    settings_connect_to_subtitle_error: "Error connecting to GGMN",
    settings_sync_heading: "GGMN Sync",
    settings_new_resource: "New GW Station",
    search_hint: "Search for Groundwater Stations by their ID.",
    new_reading_warning_login_required: "Reading saved locally only. Login with GGMN to save.",
    new_reading_value_field: function new_reading_value_field(units) {
      return "Measurement in ".concat(units);
    },
    new_reading_value_field_invalid: "Invalid Measurement",
    connect_to_service_description: "Connect to GGMN to create new groundwater stations and save readings from your device.",
    connect_to_service_connected_test: function connect_to_service_connected_test(fieldName, username) {
      return "You are connected to GGMN with the ".concat(fieldName, ": ").concat(username);
    },
    connect_to_service_org_selector: "Select an organisation",
    recent_resource_none: "No recent groundwater stations",
    resource_detail_new: "New Reading",
    sync_login_message: "Login to sync with GGMN",
    sync_start_sync_button_loading: "Syncing with GGMN",
    sync_section_resources: "Groundwater Stations",
    sync_empty_content: "Start making measurements or creating groundwater stations to get started.",
    resource_detail_empty_heading: "You haven't found any groundwater stations yet.",
    resource_detail_empty_hint: "Press the search button or browse the map to find some.",
    new_resource_saved_dialog_warning: "Saved Location Locally. Login to GGMN to sync.",
    resource_name: "Groundwater Station",
    timeseries_name_title: function timeseries_name_title(tsName) {
      switch (tsName.toLowerCase()) {
        case 'gwmbgs':
          return "Groundwater level below ground surface";

        case 'gwmmsl':
        default:
          return "Groundwater level below ground surface";
      }
    },
    sync_manual_text: "Groundwater Stations need to be synced manually",
    sync_screen_heading: "In order to finish saving your groundwater stations to GGMN, you need to manually register them on the GGMN site.",
    sync_screen_step_1_body: "Click the 'Send Email' button below to send an email to your GGMN account. This email will contain the shapefiles needed to register the groundwater stations",
    sync_screen_step_2_body: "Once you have recieved the email, log into GGMN at https://ggmn.un-igrac.org/ and select 'Upload' in the top right corner.",
    sync_screen_step_3_body: "Scroll down to 'Import a SufHyd or shape File' select the organisation your account is associated with, and the file from the email.",
    sync_screen_step_4_body: "Once this is done, log back into GGMN on your device, and you will see that resources have changed color, and and pending reaadings will start to save.",
    sync_screen_help_body: "Just reach out to Claudia at",
    sync_screen_step_5_body: "Once this is done, log back into GGMN on your device, and you will see that the groundwater stations have changed color, and pending readings will start to save.",
    sync_screen_help_email: "claudia.ruz-vargas@un-igrac.org",
    sync_screen_help_end: ". We'd be glad to assist you.",
    resource_email_subject: "GGMN Manual Resources",
    resource_email_message: "Here are your shapefile and csv files for manually syncing to GGMN. Go to https://www.un-igrac.org/ggis/ggmn-portal to get started."
  }
};
exports.ggmn_en_AU = ggmn_en_AU;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZ21uL2VuX0FVLnRzIl0sIm5hbWVzIjpbImdnbW5fZW5fQVUiLCJvcmciLCJUcmFuc2xhdGlvbk9yZyIsImdnbW4iLCJvdmVycmlkZXMiLCJzZXR0aW5nc19jb25uZWN0X3RvX3BlbmRpbmdfdGl0bGUiLCJzZXR0aW5nc19jb25uZWN0X3RvX2Nvbm5lY3RlZF90aXRsZSIsInNldHRpbmdzX2Nvbm5lY3RfdG9fc3VidGl0bGVfZXJyb3IiLCJzZXR0aW5nc19zeW5jX2hlYWRpbmciLCJzZXR0aW5nc19uZXdfcmVzb3VyY2UiLCJzZWFyY2hfaGludCIsIm5ld19yZWFkaW5nX3dhcm5pbmdfbG9naW5fcmVxdWlyZWQiLCJuZXdfcmVhZGluZ192YWx1ZV9maWVsZCIsInVuaXRzIiwibmV3X3JlYWRpbmdfdmFsdWVfZmllbGRfaW52YWxpZCIsImNvbm5lY3RfdG9fc2VydmljZV9kZXNjcmlwdGlvbiIsImNvbm5lY3RfdG9fc2VydmljZV9jb25uZWN0ZWRfdGVzdCIsImZpZWxkTmFtZSIsInVzZXJuYW1lIiwiY29ubmVjdF90b19zZXJ2aWNlX29yZ19zZWxlY3RvciIsInJlY2VudF9yZXNvdXJjZV9ub25lIiwicmVzb3VyY2VfZGV0YWlsX25ldyIsInN5bmNfbG9naW5fbWVzc2FnZSIsInN5bmNfc3RhcnRfc3luY19idXR0b25fbG9hZGluZyIsInN5bmNfc2VjdGlvbl9yZXNvdXJjZXMiLCJzeW5jX2VtcHR5X2NvbnRlbnQiLCJyZXNvdXJjZV9kZXRhaWxfZW1wdHlfaGVhZGluZyIsInJlc291cmNlX2RldGFpbF9lbXB0eV9oaW50IiwibmV3X3Jlc291cmNlX3NhdmVkX2RpYWxvZ193YXJuaW5nIiwicmVzb3VyY2VfbmFtZSIsInRpbWVzZXJpZXNfbmFtZV90aXRsZSIsInRzTmFtZSIsInRvTG93ZXJDYXNlIiwic3luY19tYW51YWxfdGV4dCIsInN5bmNfc2NyZWVuX2hlYWRpbmciLCJzeW5jX3NjcmVlbl9zdGVwXzFfYm9keSIsInN5bmNfc2NyZWVuX3N0ZXBfMl9ib2R5Iiwic3luY19zY3JlZW5fc3RlcF8zX2JvZHkiLCJzeW5jX3NjcmVlbl9zdGVwXzRfYm9keSIsInN5bmNfc2NyZWVuX2hlbHBfYm9keSIsInN5bmNfc2NyZWVuX3N0ZXBfNV9ib2R5Iiwic3luY19zY3JlZW5faGVscF9lbWFpbCIsInN5bmNfc2NyZWVuX2hlbHBfZW5kIiwicmVzb3VyY2VfZW1haWxfc3ViamVjdCIsInJlc291cmNlX2VtYWlsX21lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7QUFQQTs7Ozs7O0FBU0EsSUFBTUEsVUFBbUMsR0FBRztBQUMxQ0MsRUFBQUEsR0FBRyxFQUFFQyxzQkFBZUMsSUFEc0I7QUFFMUNDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxpQ0FBaUMsRUFBRSxpQkFEMUI7QUFFVEMsSUFBQUEsbUNBQW1DLEVBQUUsbUJBRjVCO0FBR1RDLElBQUFBLGtDQUFrQyxFQUFFLDBCQUgzQjtBQUlUQyxJQUFBQSxxQkFBcUIsRUFBRSxXQUpkO0FBS1RDLElBQUFBLHFCQUFxQixFQUFFLGdCQUxkO0FBTVRDLElBQUFBLFdBQVcsRUFBRSw4Q0FOSjtBQU9UQyxJQUFBQSxrQ0FBa0MsRUFBRSxzREFQM0I7QUFRVEMsSUFBQUEsdUJBQXVCLEVBQUUsaUNBQUNDLEtBQUQ7QUFBQSxzQ0FBcUNBLEtBQXJDO0FBQUEsS0FSaEI7QUFTVEMsSUFBQUEsK0JBQStCLEVBQUUscUJBVHhCO0FBVVRDLElBQUFBLDhCQUE4QixFQUFFLHdGQVZ2QjtBQVdUQyxJQUFBQSxpQ0FBaUMsRUFBRSwyQ0FBQ0MsU0FBRCxFQUFvQkMsUUFBcEI7QUFBQSwwREFBK0VELFNBQS9FLGVBQTZGQyxRQUE3RjtBQUFBLEtBWDFCO0FBWVRDLElBQUFBLCtCQUErQixFQUFFLHdCQVp4QjtBQWFUQyxJQUFBQSxvQkFBb0IsRUFBRSxnQ0FiYjtBQWNUQyxJQUFBQSxtQkFBbUIsRUFBRSxhQWRaO0FBZVRDLElBQUFBLGtCQUFrQixFQUFFLHlCQWZYO0FBZ0JUQyxJQUFBQSw4QkFBOEIsRUFBRSxtQkFoQnZCO0FBaUJUQyxJQUFBQSxzQkFBc0IsRUFBRSxzQkFqQmY7QUFrQlRDLElBQUFBLGtCQUFrQixFQUFFLDRFQWxCWDtBQW1CVEMsSUFBQUEsNkJBQTZCLEVBQUUsaURBbkJ0QjtBQW9CVEMsSUFBQUEsMEJBQTBCLEVBQUUseURBcEJuQjtBQXFCVEMsSUFBQUEsaUNBQWlDLEVBQUUsZ0RBckIxQjtBQXNCVEMsSUFBQUEsYUFBYSxFQUFFLHFCQXRCTjtBQXVCVEMsSUFBQUEscUJBQXFCLEVBQUUsK0JBQUNDLE1BQUQsRUFBb0I7QUFDM0MsY0FBUUEsTUFBTSxDQUFDQyxXQUFQLEVBQVI7QUFDRSxhQUFLLFFBQUw7QUFBZTs7QUFDZixhQUFLLFFBQUw7QUFDQTtBQUFTO0FBSFg7QUFLRCxLQTdCVTtBQThCVEMsSUFBQUEsZ0JBQWdCLEVBQUUsaURBOUJUO0FBK0JUQyxJQUFBQSxtQkFBbUIsRUFBRSxtSEEvQlo7QUFnQ1RDLElBQUFBLHVCQUF1QixFQUFFLCtKQWhDaEI7QUFpQ1RDLElBQUFBLHVCQUF1QixFQUFFLDRIQWpDaEI7QUFrQ1RDLElBQUFBLHVCQUF1QixFQUFFLHNJQWxDaEI7QUFtQ1RDLElBQUFBLHVCQUF1QixFQUFFLHlKQW5DaEI7QUFvQ1RDLElBQUFBLHFCQUFxQixFQUFFLDhCQXBDZDtBQXFDVEMsSUFBQUEsdUJBQXVCLEVBQUUsbUtBckNoQjtBQXNDVEMsSUFBQUEsc0JBQXNCLEVBQUUsaUNBdENmO0FBdUNUQyxJQUFBQSxvQkFBb0IsRUFBRSwrQkF2Q2I7QUF3Q1RDLElBQUFBLHNCQUFzQixFQUFFLHVCQXhDZjtBQXlDVEMsSUFBQUEsc0JBQXNCLEVBQUU7QUF6Q2Y7QUFGK0IsQ0FBNUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERvIG5vdCBlZGl0IHRoaXMgZmlsZSBkaXJlY3RseS4gXG4gKiBJbnN0ZWFkLCBlZGl0IHRoZSBhcHByb3ByaWF0ZSBzcHJlYWRzaGVldCBcbiAqIGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0cy9kLzEwMnpMcUVXajR4bHFxTmdWVUZDaU1McWRjdmFMWTZHbnRTMXhtbEhkQUU4L2VkaXQjZ2lkPTBcbiAqIGFuZCByZWNvbXBpbGUgaW4gb3JkZXIgdG8gY2hhbmdlIHRoZXNlIGZpZWxkc1xuICovXG5cbmltcG9ydCB7IFRyYW5zbGF0aW9uT3JnLCBUcmFuc2xhdGlvbk92ZXJyaWRlRmlsZSB9IGZyb20gXCIuLi9UeXBlc1wiO1xuXG5jb25zdCBnZ21uX2VuX0FVOiBUcmFuc2xhdGlvbk92ZXJyaWRlRmlsZSA9IHtcbiAgb3JnOiBUcmFuc2xhdGlvbk9yZy5nZ21uLFxuICBvdmVycmlkZXM6IHtcbiAgICBzZXR0aW5nc19jb25uZWN0X3RvX3BlbmRpbmdfdGl0bGU6IFwiQ29ubmVjdCB0byBHR01OXCIsXG4gICAgc2V0dGluZ3NfY29ubmVjdF90b19jb25uZWN0ZWRfdGl0bGU6IFwiQ29ubmVjdGVkIHRvIEdHTU5cIixcbiAgICBzZXR0aW5nc19jb25uZWN0X3RvX3N1YnRpdGxlX2Vycm9yOiBcIkVycm9yIGNvbm5lY3RpbmcgdG8gR0dNTlwiLFxuICAgIHNldHRpbmdzX3N5bmNfaGVhZGluZzogXCJHR01OIFN5bmNcIixcbiAgICBzZXR0aW5nc19uZXdfcmVzb3VyY2U6IFwiTmV3IEdXIFN0YXRpb25cIixcbiAgICBzZWFyY2hfaGludDogXCJTZWFyY2ggZm9yIEdyb3VuZHdhdGVyIFN0YXRpb25zIGJ5IHRoZWlyIElELlwiLFxuICAgIG5ld19yZWFkaW5nX3dhcm5pbmdfbG9naW5fcmVxdWlyZWQ6IFwiUmVhZGluZyBzYXZlZCBsb2NhbGx5IG9ubHkuIExvZ2luIHdpdGggR0dNTiB0byBzYXZlLlwiLFxuICAgIG5ld19yZWFkaW5nX3ZhbHVlX2ZpZWxkOiAodW5pdHM6IHN0cmluZykgPT4gYE1lYXN1cmVtZW50IGluICR7dW5pdHN9YCxcbiAgICBuZXdfcmVhZGluZ192YWx1ZV9maWVsZF9pbnZhbGlkOiBcIkludmFsaWQgTWVhc3VyZW1lbnRcIixcbiAgICBjb25uZWN0X3RvX3NlcnZpY2VfZGVzY3JpcHRpb246IFwiQ29ubmVjdCB0byBHR01OIHRvIGNyZWF0ZSBuZXcgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgYW5kIHNhdmUgcmVhZGluZ3MgZnJvbSB5b3VyIGRldmljZS5cIixcbiAgICBjb25uZWN0X3RvX3NlcnZpY2VfY29ubmVjdGVkX3Rlc3Q6IChmaWVsZE5hbWU6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZykgPT4gYFlvdSBhcmUgY29ubmVjdGVkIHRvIEdHTU4gd2l0aCB0aGUgJHtmaWVsZE5hbWV9OiAke3VzZXJuYW1lfWAsXG4gICAgY29ubmVjdF90b19zZXJ2aWNlX29yZ19zZWxlY3RvcjogXCJTZWxlY3QgYW4gb3JnYW5pc2F0aW9uXCIsXG4gICAgcmVjZW50X3Jlc291cmNlX25vbmU6IFwiTm8gcmVjZW50IGdyb3VuZHdhdGVyIHN0YXRpb25zXCIsXG4gICAgcmVzb3VyY2VfZGV0YWlsX25ldzogXCJOZXcgUmVhZGluZ1wiLFxuICAgIHN5bmNfbG9naW5fbWVzc2FnZTogXCJMb2dpbiB0byBzeW5jIHdpdGggR0dNTlwiLFxuICAgIHN5bmNfc3RhcnRfc3luY19idXR0b25fbG9hZGluZzogXCJTeW5jaW5nIHdpdGggR0dNTlwiLFxuICAgIHN5bmNfc2VjdGlvbl9yZXNvdXJjZXM6IFwiR3JvdW5kd2F0ZXIgU3RhdGlvbnNcIixcbiAgICBzeW5jX2VtcHR5X2NvbnRlbnQ6IFwiU3RhcnQgbWFraW5nIG1lYXN1cmVtZW50cyBvciBjcmVhdGluZyBncm91bmR3YXRlciBzdGF0aW9ucyB0byBnZXQgc3RhcnRlZC5cIixcbiAgICByZXNvdXJjZV9kZXRhaWxfZW1wdHlfaGVhZGluZzogXCJZb3UgaGF2ZW4ndCBmb3VuZCBhbnkgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgeWV0LlwiLFxuICAgIHJlc291cmNlX2RldGFpbF9lbXB0eV9oaW50OiBcIlByZXNzIHRoZSBzZWFyY2ggYnV0dG9uIG9yIGJyb3dzZSB0aGUgbWFwIHRvIGZpbmQgc29tZS5cIixcbiAgICBuZXdfcmVzb3VyY2Vfc2F2ZWRfZGlhbG9nX3dhcm5pbmc6IFwiU2F2ZWQgTG9jYXRpb24gTG9jYWxseS4gTG9naW4gdG8gR0dNTiB0byBzeW5jLlwiLFxuICAgIHJlc291cmNlX25hbWU6IFwiR3JvdW5kd2F0ZXIgU3RhdGlvblwiLFxuICAgIHRpbWVzZXJpZXNfbmFtZV90aXRsZTogKHRzTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgc3dpdGNoICh0c05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAnZ3dtYmdzJzogcmV0dXJuIGBHcm91bmR3YXRlciBsZXZlbCBiZWxvdyBncm91bmQgc3VyZmFjZWBcbiAgICAgIGNhc2UgJ2d3bW1zbCc6XG4gICAgICBkZWZhdWx0OiByZXR1cm4gYEdyb3VuZHdhdGVyIGxldmVsIGJlbG93IGdyb3VuZCBzdXJmYWNlYFxuICAgIH1cbiAgfSxcbiAgICBzeW5jX21hbnVhbF90ZXh0OiBcIkdyb3VuZHdhdGVyIFN0YXRpb25zIG5lZWQgdG8gYmUgc3luY2VkIG1hbnVhbGx5XCIsXG4gICAgc3luY19zY3JlZW5faGVhZGluZzogXCJJbiBvcmRlciB0byBmaW5pc2ggc2F2aW5nIHlvdXIgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgdG8gR0dNTiwgeW91IG5lZWQgdG8gbWFudWFsbHkgcmVnaXN0ZXIgdGhlbSBvbiB0aGUgR0dNTiBzaXRlLlwiLFxuICAgIHN5bmNfc2NyZWVuX3N0ZXBfMV9ib2R5OiBcIkNsaWNrIHRoZSAnU2VuZCBFbWFpbCcgYnV0dG9uIGJlbG93IHRvIHNlbmQgYW4gZW1haWwgdG8geW91ciBHR01OIGFjY291bnQuIFRoaXMgZW1haWwgd2lsbCBjb250YWluIHRoZSBzaGFwZWZpbGVzIG5lZWRlZCB0byByZWdpc3RlciB0aGUgZ3JvdW5kd2F0ZXIgc3RhdGlvbnNcIixcbiAgICBzeW5jX3NjcmVlbl9zdGVwXzJfYm9keTogXCJPbmNlIHlvdSBoYXZlIHJlY2lldmVkIHRoZSBlbWFpbCwgbG9nIGludG8gR0dNTiBhdCBodHRwczovL2dnbW4udW4taWdyYWMub3JnLyBhbmQgc2VsZWN0ICdVcGxvYWQnIGluIHRoZSB0b3AgcmlnaHQgY29ybmVyLlwiLFxuICAgIHN5bmNfc2NyZWVuX3N0ZXBfM19ib2R5OiBcIlNjcm9sbCBkb3duIHRvICdJbXBvcnQgYSBTdWZIeWQgb3Igc2hhcGUgRmlsZScgc2VsZWN0IHRoZSBvcmdhbmlzYXRpb24geW91ciBhY2NvdW50IGlzIGFzc29jaWF0ZWQgd2l0aCwgYW5kIHRoZSBmaWxlIGZyb20gdGhlIGVtYWlsLlwiLFxuICAgIHN5bmNfc2NyZWVuX3N0ZXBfNF9ib2R5OiBcIk9uY2UgdGhpcyBpcyBkb25lLCBsb2cgYmFjayBpbnRvIEdHTU4gb24geW91ciBkZXZpY2UsIGFuZCB5b3Ugd2lsbCBzZWUgdGhhdCByZXNvdXJjZXMgaGF2ZSBjaGFuZ2VkIGNvbG9yLCBhbmQgYW5kIHBlbmRpbmcgcmVhYWRpbmdzIHdpbGwgc3RhcnQgdG8gc2F2ZS5cIixcbiAgICBzeW5jX3NjcmVlbl9oZWxwX2JvZHk6IFwiSnVzdCByZWFjaCBvdXQgdG8gQ2xhdWRpYSBhdFwiLFxuICAgIHN5bmNfc2NyZWVuX3N0ZXBfNV9ib2R5OiBcIk9uY2UgdGhpcyBpcyBkb25lLCBsb2cgYmFjayBpbnRvIEdHTU4gb24geW91ciBkZXZpY2UsIGFuZCB5b3Ugd2lsbCBzZWUgdGhhdCB0aGUgZ3JvdW5kd2F0ZXIgc3RhdGlvbnMgaGF2ZSBjaGFuZ2VkIGNvbG9yLCBhbmQgcGVuZGluZyByZWFkaW5ncyB3aWxsIHN0YXJ0IHRvIHNhdmUuXCIsXG4gICAgc3luY19zY3JlZW5faGVscF9lbWFpbDogXCJjbGF1ZGlhLnJ1ei12YXJnYXNAdW4taWdyYWMub3JnXCIsXG4gICAgc3luY19zY3JlZW5faGVscF9lbmQ6IFwiLiBXZSdkIGJlIGdsYWQgdG8gYXNzaXN0IHlvdS5cIixcbiAgICByZXNvdXJjZV9lbWFpbF9zdWJqZWN0OiBcIkdHTU4gTWFudWFsIFJlc291cmNlc1wiLFxuICAgIHJlc291cmNlX2VtYWlsX21lc3NhZ2U6IFwiSGVyZSBhcmUgeW91ciBzaGFwZWZpbGUgYW5kIGNzdiBmaWxlcyBmb3IgbWFudWFsbHkgc3luY2luZyB0byBHR01OLiBHbyB0byBodHRwczovL3d3dy51bi1pZ3JhYy5vcmcvZ2dpcy9nZ21uLXBvcnRhbCB0byBnZXQgc3RhcnRlZC5cIixcbiAgfVxufVxuXG5leHBvcnQge2dnbW5fZW5fQVV9O1xuIl19