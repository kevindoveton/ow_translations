"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileForTranslations = fileForTranslations;
exports.fileForOverrides = fileForOverrides;

var _parser = require("./parser");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getTemplateStrings(translations) {
  delete translations['language'];
  delete translations['region'];
  var rows = Object.keys(translations).map(function (key) {
    var _translations$key = _slicedToArray(translations[key], 2),
        value = _translations$key[0],
        type = _translations$key[1];

    if (type === _parser.TranslationRowType.function) {
      //No need for quotes for function based rows
      return "    ".concat(key, ": ").concat(value, ",");
    }

    return "    ".concat(key, ": \"").concat(value.replace(/\n/g, ""), "\",");
  });
  return rows.reduce(function (acc, curr) {
    return acc + '\n' + curr;
  }, '');
}

function fileForTranslations(translationEnum, translations) {
  var templateStrings = "hello 123";
  var string = "/**\n * Do not edit this file directly. \n * Instead, edit the appropriate spreadsheet \n * https://docs.google.com/spreadsheets/d/102zLqEWj4xlqqNgVUFCiMLqdcvaLY6GntS1xmlHdAE8/edit#gid=0\n * and recompile in order to change these fields\n */\n\nimport { TranslationFile } from \"../Types\";\n\nconst ".concat(translationEnum, ": TranslationFile = {\n  metadata: {\n    language: '").concat(translations.language[0], "',\n    region: '").concat(translations.region[0], "',\n  },\n  templates: {").concat(getTemplateStrings(translations), "\n  }\n}\n\nexport {").concat(translationEnum, "};\n");
  return string;
}

function fileForOverrides(translationOrg, translationEnum, translations) {
  var string = "/**\n * Do not edit this file directly. \n * Instead, edit the appropriate spreadsheet \n * https://docs.google.com/spreadsheets/d/102zLqEWj4xlqqNgVUFCiMLqdcvaLY6GntS1xmlHdAE8/edit#gid=0\n * and recompile in order to change these fields\n */\n\nimport { TranslationOrg, TranslationOverrideFile } from \"../Types\";\n\nconst ".concat(translationOrg, "_").concat(translationEnum, ": TranslationOverrideFile = {\n  org: TranslationOrg.").concat(translationOrg, ",\n  overrides: {").concat(getTemplateStrings(translations), "\n  }\n}\n\nexport {").concat(translationOrg, "_").concat(translationEnum, "};\n");
  return string;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6WyJnZXRUZW1wbGF0ZVN0cmluZ3MiLCJ0cmFuc2xhdGlvbnMiLCJyb3dzIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsInZhbHVlIiwidHlwZSIsIlRyYW5zbGF0aW9uUm93VHlwZSIsImZ1bmN0aW9uIiwicmVwbGFjZSIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJmaWxlRm9yVHJhbnNsYXRpb25zIiwidHJhbnNsYXRpb25FbnVtIiwidGVtcGxhdGVTdHJpbmdzIiwic3RyaW5nIiwibGFuZ3VhZ2UiLCJyZWdpb24iLCJmaWxlRm9yT3ZlcnJpZGVzIiwidHJhbnNsYXRpb25PcmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7QUFJQSxTQUFTQSxrQkFBVCxDQUE0QkMsWUFBNUIsRUFBcUc7QUFDbkcsU0FBT0EsWUFBWSxDQUFDLFVBQUQsQ0FBbkI7QUFDQSxTQUFPQSxZQUFZLENBQUMsUUFBRCxDQUFuQjtBQUVBLE1BQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlILFlBQVosRUFBMEJJLEdBQTFCLENBQThCLFVBQUFDLEdBQUcsRUFBSTtBQUFBLDJDQUMxQkwsWUFBWSxDQUFDSyxHQUFELENBRGM7QUFBQSxRQUN6Q0MsS0FEeUM7QUFBQSxRQUNsQ0MsSUFEa0M7O0FBRWhELFFBQUlBLElBQUksS0FBS0MsMkJBQW1CQyxRQUFoQyxFQUEwQztBQUN4QztBQUNBLDJCQUFjSixHQUFkLGVBQXNCQyxLQUF0QjtBQUNEOztBQUNELHlCQUFjRCxHQUFkLGlCQUF1QkMsS0FBSyxDQUFDSSxPQUFOLENBQWMsS0FBZCxFQUFxQixFQUFyQixDQUF2QjtBQUNELEdBUFksQ0FBYjtBQVFBLFNBQU9ULElBQUksQ0FBQ1UsTUFBTCxDQUFZLFVBQUNDLEdBQUQsRUFBY0MsSUFBZCxFQUErQjtBQUNoRCxXQUFPRCxHQUFHLEdBQUcsSUFBTixHQUFhQyxJQUFwQjtBQUNELEdBRk0sRUFFTCxFQUZLLENBQVA7QUFHRDs7QUFFTSxTQUFTQyxtQkFBVCxDQUE2QkMsZUFBN0IsRUFBK0RmLFlBQS9ELEVBQXVJO0FBRTVJLE1BQU1nQixlQUFlLEdBQUcsV0FBeEI7QUFFQSxNQUFNQyxNQUFNLHlUQVNORixlQVRNLGtFQVdHZixZQUFZLENBQUNrQixRQUFiLENBQXNCLENBQXRCLENBWEgsOEJBWUNsQixZQUFZLENBQUNtQixNQUFiLENBQW9CLENBQXBCLENBWkQscUNBY0VwQixrQkFBa0IsQ0FBQ0MsWUFBRCxDQWRwQixpQ0FrQkplLGVBbEJJLFNBQVo7QUFxQkEsU0FBT0UsTUFBUDtBQUNEOztBQUdNLFNBQVNHLGdCQUFULENBQTBCQyxjQUExQixFQUFrRE4sZUFBbEQsRUFBb0ZmLFlBQXBGLEVBQTZKO0FBRWxLLE1BQU1pQixNQUFNLGlWQVNOSSxjQVRNLGNBU1lOLGVBVFosa0VBVVVNLGNBVlYsOEJBV0V0QixrQkFBa0IsQ0FBQ0MsWUFBRCxDQVhwQixpQ0FlSnFCLGNBZkksY0FlY04sZUFmZCxTQUFaO0FBa0JBLFNBQU9FLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0aW9uUm93VHlwZSB9IGZyb20gXCIuL3BhcnNlclwiO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25FbnVtIH0gZnJvbSBcIi4vVHlwZXNcIjtcblxuXG5mdW5jdGlvbiBnZXRUZW1wbGF0ZVN0cmluZ3ModHJhbnNsYXRpb25zOiB7IFtpbmRleDogc3RyaW5nXTogW3N0cmluZywgVHJhbnNsYXRpb25Sb3dUeXBlXSB9KTogc3RyaW5nIHtcbiAgZGVsZXRlIHRyYW5zbGF0aW9uc1snbGFuZ3VhZ2UnXTtcbiAgZGVsZXRlIHRyYW5zbGF0aW9uc1sncmVnaW9uJ107XG5cbiAgY29uc3Qgcm93cyA9IE9iamVjdC5rZXlzKHRyYW5zbGF0aW9ucykubWFwKGtleSA9PiB7XG4gICAgY29uc3QgW3ZhbHVlLCB0eXBlXSA9IHRyYW5zbGF0aW9uc1trZXldO1xuICAgIGlmICh0eXBlID09PSBUcmFuc2xhdGlvblJvd1R5cGUuZnVuY3Rpb24pIHtcbiAgICAgIC8vTm8gbmVlZCBmb3IgcXVvdGVzIGZvciBmdW5jdGlvbiBiYXNlZCByb3dzXG4gICAgICByZXR1cm4gYCAgICAke2tleX06ICR7dmFsdWV9LGBcbiAgICB9XG4gICAgcmV0dXJuIGAgICAgJHtrZXl9OiBcIiR7dmFsdWUucmVwbGFjZSgvXFxuL2csIFwiXCIpfVwiLGBcbiAgfSk7XG4gIHJldHVybiByb3dzLnJlZHVjZSgoYWNjOiBzdHJpbmcsIGN1cnI6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhY2MgKyAnXFxuJyArIGN1cnI7XG4gIH0sJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsZUZvclRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbkVudW06IFRyYW5zbGF0aW9uRW51bSwgdHJhbnNsYXRpb25zOiB7W2luZGV4OiBzdHJpbmddOiBbc3RyaW5nLCBUcmFuc2xhdGlvblJvd1R5cGVdfSApOiBzdHJpbmcge1xuXG4gIGNvbnN0IHRlbXBsYXRlU3RyaW5ncyA9IFwiaGVsbG8gMTIzXCI7XG5cbiAgY29uc3Qgc3RyaW5nID0gYC8qKlxuICogRG8gbm90IGVkaXQgdGhpcyBmaWxlIGRpcmVjdGx5LiBcbiAqIEluc3RlYWQsIGVkaXQgdGhlIGFwcHJvcHJpYXRlIHNwcmVhZHNoZWV0IFxuICogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMTAyekxxRVdqNHhscXFOZ1ZVRkNpTUxxZGN2YUxZNkdudFMxeG1sSGRBRTgvZWRpdCNnaWQ9MFxuICogYW5kIHJlY29tcGlsZSBpbiBvcmRlciB0byBjaGFuZ2UgdGhlc2UgZmllbGRzXG4gKi9cblxuaW1wb3J0IHsgVHJhbnNsYXRpb25GaWxlIH0gZnJvbSBcIi4uL1R5cGVzXCI7XG5cbmNvbnN0ICR7dHJhbnNsYXRpb25FbnVtfTogVHJhbnNsYXRpb25GaWxlID0ge1xuICBtZXRhZGF0YToge1xuICAgIGxhbmd1YWdlOiAnJHt0cmFuc2xhdGlvbnMubGFuZ3VhZ2VbMF19JyxcbiAgICByZWdpb246ICcke3RyYW5zbGF0aW9ucy5yZWdpb25bMF19JyxcbiAgfSxcbiAgdGVtcGxhdGVzOiB7JHtnZXRUZW1wbGF0ZVN0cmluZ3ModHJhbnNsYXRpb25zKX1cbiAgfVxufVxuXG5leHBvcnQgeyR7dHJhbnNsYXRpb25FbnVtfX07XG5gXG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZmlsZUZvck92ZXJyaWRlcyh0cmFuc2xhdGlvbk9yZzogc3RyaW5nLCB0cmFuc2xhdGlvbkVudW06IFRyYW5zbGF0aW9uRW51bSwgdHJhbnNsYXRpb25zOiB7IFtpbmRleDogc3RyaW5nXTogW3N0cmluZywgVHJhbnNsYXRpb25Sb3dUeXBlXSB9KTogc3RyaW5nIHtcblxuICBjb25zdCBzdHJpbmcgPSBgLyoqXG4gKiBEbyBub3QgZWRpdCB0aGlzIGZpbGUgZGlyZWN0bHkuIFxuICogSW5zdGVhZCwgZWRpdCB0aGUgYXBwcm9wcmlhdGUgc3ByZWFkc2hlZXQgXG4gKiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC8xMDJ6THFFV2o0eGxxcU5nVlVGQ2lNTHFkY3ZhTFk2R250UzF4bWxIZEFFOC9lZGl0I2dpZD0wXG4gKiBhbmQgcmVjb21waWxlIGluIG9yZGVyIHRvIGNoYW5nZSB0aGVzZSBmaWVsZHNcbiAqL1xuXG5pbXBvcnQgeyBUcmFuc2xhdGlvbk9yZywgVHJhbnNsYXRpb25PdmVycmlkZUZpbGUgfSBmcm9tIFwiLi4vVHlwZXNcIjtcblxuY29uc3QgJHt0cmFuc2xhdGlvbk9yZ31fJHt0cmFuc2xhdGlvbkVudW19OiBUcmFuc2xhdGlvbk92ZXJyaWRlRmlsZSA9IHtcbiAgb3JnOiBUcmFuc2xhdGlvbk9yZy4ke3RyYW5zbGF0aW9uT3JnfSxcbiAgb3ZlcnJpZGVzOiB7JHtnZXRUZW1wbGF0ZVN0cmluZ3ModHJhbnNsYXRpb25zKX1cbiAgfVxufVxuXG5leHBvcnQgeyR7dHJhbnNsYXRpb25Pcmd9XyR7dHJhbnNsYXRpb25FbnVtfX07XG5gXG5cbiAgcmV0dXJuIHN0cmluZztcbn0iXX0=