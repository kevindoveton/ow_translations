"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TranslationRowType = void 0;

var _template = require("./template");

var _Types = require("./Types");

var fs = require('fs');

/**
 * Parser pulls down the translations from Google sheets, and puts them
 * in the right fields.
 */
var request = require('request-promise-native');

var TranslationRowType;
exports.TranslationRowType = TranslationRowType;

(function (TranslationRowType) {
  TranslationRowType["string"] = "string";
  TranslationRowType["function"] = "function";
})(TranslationRowType || (exports.TranslationRowType = TranslationRowType = {}));

function writeFile(path, contents) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(path, contents, function (err) {
      if (err) {
        return reject(err);
      }

      resolve();
    });
  });
}

function run() {
  //https://docs.google.com/spreadsheets/d/e/2PACX-1vSHp6u_WXM18NB9RqPfiaKugHdT_zhHP5NQlZYStzRJfnwFJPlfwTSYtAGJvP1axvhZ8WifYJcE8RAJ/pubhtml
  var sheetsId = "102zLqEWj4xlqqNgVUFCiMLqdcvaLY6GntS1xmlHdAE8";
  var url = "https://spreadsheets.google.com/feeds/list/".concat(sheetsId, "/default/public/values?alt=json;");
  var options = {
    method: 'GET',
    url: url,
    qs: {
      alt: 'json'
    },
    headers: {
      'Cache-Control': 'no-cache'
    },
    json: true
  };
  return request(options).then(function (response) {
    console.log(response.feed.title);
    var perRowTranslations = [];
    response.feed.entry.forEach(function (r) {
      var row = {
        id: r.title.$t,
        type: r.gsx$type.$t,
        en_AU: r.gsx$enau.$t,
        en_US: r.gsx$enus.$t,
        guj_IN: r.gsx$gujin.$t,
        hi_IN: r.gsx$hiin.$t,
        test_UPPER: r.gsx$testupper.$t,
        fr_FR: r.gsx$frfr.$t,
        es_ES: r.gsx$eses.$t
      };
      perRowTranslations.push(row);
    }); //Now that we have the rows, write the files!

    var en_AU = {};
    var en_US = {};
    var guj_IN = {};
    var hi_IN = {};
    var fr_FR = {};
    var es_ES = {};
    var test_UPPER = {};
    perRowTranslations.forEach(function (row) {
      return en_AU[row.id] = [row.en_AU, row.type];
    });
    perRowTranslations.forEach(function (row) {
      return en_US[row.id] = [row.en_US, row.type];
    });
    perRowTranslations.forEach(function (row) {
      return guj_IN[row.id] = [row.guj_IN, row.type];
    });
    perRowTranslations.forEach(function (row) {
      return hi_IN[row.id] = [row.hi_IN, row.type];
    });
    perRowTranslations.forEach(function (row) {
      return fr_FR[row.id] = [row.fr_FR, row.type];
    });
    perRowTranslations.forEach(function (row) {
      return es_ES[row.id] = [row.es_ES, row.type];
    });
    perRowTranslations.forEach(function (row) {
      return test_UPPER[row.id] = [row.test_UPPER, row.type];
    });
    var en_AU_file = (0, _template.fileForTranslations)(_Types.TranslationEnum.en_AU, en_AU);
    var en_US_file = (0, _template.fileForTranslations)(_Types.TranslationEnum.en_US, en_US);
    var uj_IN_file = (0, _template.fileForTranslations)(_Types.TranslationEnum.guj_IN, guj_IN);
    var hi_IN_file = (0, _template.fileForTranslations)(_Types.TranslationEnum.hi_IN, hi_IN);
    var test_UPPER_file = (0, _template.fileForTranslations)(_Types.TranslationEnum.test_UPPER, test_UPPER);
    var fr_FR_file = (0, _template.fileForTranslations)(_Types.TranslationEnum.fr_FR, fr_FR);
    var es_ES_file = (0, _template.fileForTranslations)(_Types.TranslationEnum.es_ES, es_ES);
    return Promise.all([writeFile('./src/common/en_AU.ts', en_AU_file), writeFile('./src/common/en_US.ts', en_US_file), writeFile('./src/common/guj_IN.ts', uj_IN_file), writeFile('./src/common/hi_IN.ts', hi_IN_file), writeFile('./src/common/test_UPPER.ts', test_UPPER_file), writeFile('./src/common/fr_FR.ts', fr_FR_file), writeFile('./src/common/es_ES.ts', es_ES_file)]).catch(function (err) {
      return console.error(err);
    });
  }).catch(function (err) {
    return console.error(err);
  });
}

run();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,